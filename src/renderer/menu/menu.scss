//////////////////////////////////////////////////////////////////////////////////////////
//   _  _ ____ _  _ ___  ____                                                           //
//   |_/  |__| |\ | |  \ |  |    This file belongs to Kando, the cross-platform         //
//   | \_ |  | | \| |__/ |__|    pie menu. Read more on github.com/kando-menu/kando     //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: Simon Schneegans <code@simonschneegans.de>
// SPDX-License-Identifier: MIT

#kando-menu {
  transition: opacity 0ms ease; //MY-KANDO set to 0... original at 150

  // When the menu is hidden or shown, we fade it to / from transparent.
  &.hidden {
    opacity: 0;

    // We also want to delay the fade-out animation if a node is selected. Else the
    // selected node would disappear before the position transition is finished.
    &.selected {
      transition-delay: 0ms; //MY-KANDO set to 0... original at 150
    }
  }

  // The menu consists of a tree of items. Their relative positions are computed in
  // JavaScript and then applied as inline styles. Each node has an additional div as
  // child with the class icon-container. This div is used to display the node's content.
  .menu-node {
    position: absolute;
    pointer-events: none;

    .icon-container {
      container-type: size;
      width: 100%;
      aspect-ratio: 1 / 1;

      white-space: nowrap;

      display: flex;
      align-items: center;
      justify-content: center;

      i {
        font-size: 75cqi;
        font-style: normal;
      }

      img {
        width: 100%;
        height: 100%;
        object-fit: contain;
      }
    }

    // Hide deeper levels than grandchildren.
    &.grandchild > .menu-node {
      display: none;
    }
  }

  // Connectors --------------------------------------------------------------------------

  // The connectors between the menu items are drawn as divs with a fixed height. Their
  // width and rotation is computed in JavaScript and then applied as inline styles.
  .connector {
    position: absolute;
    width: 0px;
    left: 0;
    transform-origin: 0% 50%;
    z-index: -1;
    display: none;
  }

  .menu-node.parent > .connector,
  .menu-node.active > .connector,
  .menu-node.active:has(> .menu-node.dragged) > .connector,
  .menu-node.active:has(> .menu-node.clicked) > .connector {
    display: block;
  }

  // Center Text -------------------------------------------------------------------------

  // The text in the center of the menu is wrapped in a square div with a 10% padding.
  .center-text {
    position: absolute;
    text-align: center;

    overflow: hidden;
    word-break: break-word;

    &.hidden {
      opacity: 0;
    }
  }
}
